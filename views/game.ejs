<canvas id="ctx" width="1000" height="500" style="border: 1px solid #000000; cursor: none"></canvas>
<h3 id="playerId" playerInfo=<%= playerId %>>Player id: <%= playerId %></h3>
<h3 id="gameId" gameId=<%= gameId %>>Game id: <%= gameId %></h3>

<script src="../client/js/Event.js"></script>
<script src="../shared/js/Vector2d.js"></script>
<script src="../shared/js/Utils.js"></script>
<script src="../client/js/Interpolation.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.1/socket.io.js"></script>

<script>

  const socket = io();
  window.onload = function (event) {
    var playerId = document.getElementById("playerId").getAttribute("playerInfo");
    var gameId = document.getElementById("gameId").getAttribute("gameId");
    socket.emit("inGame", { gameId: gameId, playerId: playerId });
  };

  const canvas = document.getElementById("ctx");
  const ctx = canvas.getContext("2d");
  let mouseX = null;
  let mouseY = null;

  let gameUpdates = [];

  //latency info
  const playerId = document.getElementById("playerId").getAttribute("playerInfo");
  let latencyHistory = [];
  let serverDeltaHistory = [];
  let latencyMean = null;
  let serverDeltaMean = null;
  let timeDelta = null;

  //load images
  // const battleTankImg = new Image();
  // battleTankImg.src = '../client/images/battleTank.png';
  // battleTankImg.onload = () => {
  //   ctx.drawImage(battleTankImg, 0, 0);
  // }
  // const turretImg = new Image();
  // turretImg.src = '../client/images/turret.png';
  // turretImg.onload = () => {
  //   ctx.drawImage(turretImg, 0, 0);
  // }
  // const fireImg = new Image();
  // fireImg.src = '../client/images/fireSprite.png';
  // fireImg.onload = () => {
  //   ctx.drawImage(fireImg, 0, 0);
  // }

  //client info
  let clientBattleTank = null;

  socket.on("gameUpdate", function (data) {
    gameUpdates = data.gameUpdates;
    console.log(gameUpdates);
  });

  setInterval(function () {
    let timeInfo = {
      sentTime: new Date().getTime()
    };
    socket.emit("clientLatencyCheck", { timeInfo });
  }, 1000);

  socket.on("serverLatencyCheck", function (data) {
    let timeInfo = data.timeInfo;
    let serverDelta = new Date().getTime() - timeInfo.serverTime;
    let latency = (new Date().getTime() - timeInfo.sentTime) / 2;

    latencyHistory.push(latency);
    if (latencyHistory.length > 10) {
      latencyHistory.shift();
    }

    let sd = utils.exports.getDataStandardDeviation(latencyHistory);
    let mean = utils.exports.getDataMean(latencyHistory);
    let tempList = latencyHistory.filter(a => ((a > mean - sd) && (a < mean + sd)));
    latencyMean = Math.round(utils.exports.getDataMean(tempList));

    serverDeltaHistory.push(serverDelta);
    if (serverDeltaHistory.length > 10) {
      serverDeltaHistory.shift();
    }
    sd = utils.exports.getDataStandardDeviation(serverDeltaHistory);
    mean = utils.exports.getDataMean(serverDeltaHistory);
    tempList = serverDeltaHistory.filter(a => ((a > mean - sd) && (a < mean + sd)));
    serverDeltaMean = Math.round(utils.exports.getDataMean(tempList));

    timeDelta = serverDeltaMean - latencyMean;
  });

  let fsx = -64;
  let fsy = -128;
  const Utils = utils.exports;
  let destroyedMissiles = [];
  setInterval(function () {
    if (gameUpdates.length > 1) {
      ctx.clearRect(0, 0, canvas.getAttribute("width"), canvas.getAttribute("height"));

      let tanks0 = gameUpdates[0].gus.battleTanks;
      let tanks1 = gameUpdates[1].gus.battleTanks;
      let currentEntities = [];

      //draw walls
      for (const wall of gameUpdates[0].gus.walls) {
        ctx.save();
        ctx.fillStyle = 'gray';

        ctx.translate(wall.entity.x, wall.entity.y);

        ctx.rotate(wall.entity.a * (Math.PI / 180));
        ctx.fillRect(
          -wall.entity.w / 2,
          -wall.entity.h / 2,
          wall.entity.w,
          wall.entity.h);
        ctx.restore();

        currentEntities.push(wall.entity);
      }

      // let fsp = Utils.getFireSpriteSelectLocation(fsx, fsy);
      // fsx = fsp.x;
      // fsy = fsp.y;
      //draw tanks
      for (const tank0 of tanks0) {

        let tank1 = tanks1.filter(t => t.entity.id === tank0.entity.id)[0];
        //get new tank position
        let newPos = Interpolation.interpolateTank(tank0, tank1, gameUpdates[0].timeSent, gameUpdates[1].timeSent, timeDelta);
        let newTank = newPos.tank;
        let newTurret = newPos.turret;

        currentEntities.push(newTank);

        if (tank0.playerId === playerId) {
          clientBattleTank = newTank;
        }

        //draw tank
        ctx.save();
        ctx.fillStyle = "black";
        ctx.translate(newTank.x, newTank.y);

        ctx.rotate(newTank.a * (Math.PI / 180));

        // ctx.drawImage(battleTankImg,
        //   -newTank.w / 2,
        //   -newTank.h / 2,
        //   newTank.w,
        //   newTank.h);
        ctx.fillRect(
        -newTank.w/2,
        -newTank.h/2,
        newTank.w,
        newTank.h);
        ctx.restore();

        //draw tank health and ammunition
        let maxHealth = tank0.maxHealth;
        let health = tank0.health;
        let ratio = health / maxHealth;
        let healthLength = 60;
        if (ratio < 0) {
          ratio = 0;
        }
        healthLength *= ratio;

        ctx.fillStyle = "green";
        ctx.fillRect(
          newTank.x - newTank.w / 2,
          newTank.y - 60,
          healthLength,
          6);

        ctx.fillText(tank0.ammunition, newTank.x + (30 + 5), newTank.y - 55);

        //draw turret
        ctx.save();
        ctx.fillStyle = 'brown';

        ctx.translate(
          newTurret.x,
          newTurret.y);

        ctx.rotate(newTurret.a * (Math.PI / 180));
        // ctx.drawImage(turretImg,
        //   -newTurret.w / 4,
        //   -newTurret.h / 2,
        //   newTurret.w,
        //   newTurret.h);
        ctx.fillRect(
        -newTurret.w/6,
        -newTurret.h/2,
        newTurret.w,
        newTurret.h);
        ctx.restore();

        // if (tank0.health <= 0) {
        //   ctx.drawImage(fireImg,
        //     fsp.x,
        //     fsp.y,
        //     fsp.w,
        //     fsp.h,
        //     newTank.x - 25,
        //     newTank.y - 75,
        //     50,
        //     100)
        // }
        // fsx
      }

      let missiles0 = gameUpdates[0].gus.missiles;
      let missiles1 = gameUpdates[1].gus.missiles;

      let missileCheck = [];
      for (const dm of destroyedMissiles) {
        if (typeof missiles1.find(m => m.entity.id === dm) !== 'undefined') {
          missileCheck.push(dm);
        }
      }
      destroyedMissiles = missileCheck;

      for (const missile0 of missiles0) {
        let missile1 = null;
        for (const m of missiles1) {
          if (m.entity.id === missile0.entity.id) {
            missile1 = m;
          }
        }

        if (missile1) {
          let newMissilePos = Interpolation.interpolateMissile(missile0, missile1, gameUpdates[0].timeSent, gameUpdates[1].timeSent, missile1.destructionTime, timeDelta);
          let doCollide = false;
          for (const entity of currentEntities) {
            doCollide = Utils.checkCollision(newMissilePos, entity);

            if (doCollide) {
              break;
            }
          }

          if (typeof destroyedMissiles.find(dm => dm === missile0.entity.id) === 'undefined') {
            if (!doCollide) {
              //draw missile
              ctx.save();
              ctx.fillStyle = 'red';

              ctx.translate(
                newMissilePos.x,
                newMissilePos.y);

              ctx.rotate(newMissilePos.a * (Math.PI / 180));
              ctx.fillRect(
                -newMissilePos.w / 2,
                -newMissilePos.h / 2,
                newMissilePos.w,
                newMissilePos.h);
              ctx.restore();
            } else {
              destroyedMissiles.push(missile0.entity.id);
            }
          }
        }
      }
      // console.log(destroyedMissiles);

      if (clientBattleTank != null) {
        //draw wall shadows
        for (const wall of gameUpdates[0].gus.walls) {

          const widestCorners = Utils.getWidestCornersOfRectangleFromViewPoint(clientBattleTank, wall.entity);
          console.log(widestCorners);

          shadowPos = [];
          for (const corner of widestCorners) {
            let addX = Math.cos(corner.angle * (Math.PI / 180)) * 2000;
            let addY = Math.sin(corner.angle * (Math.PI / 180)) * 2000;

            shadowPos.push({
              x: corner.pos.x + addX,
              y: corner.pos.y + addY
            });
          }

          ctx.fillStyle = 'black';
          ctx.beginPath();
          ctx.moveTo(widestCorners[0].pos.x, widestCorners[0].pos.y);
          ctx.lineTo(shadowPos[0].x, shadowPos[0].y);
          ctx.lineTo(shadowPos[1].x, shadowPos[1].y);
          ctx.lineTo(widestCorners[1].pos.x, widestCorners[1].pos.y);
          ctx.fill();

        }

        ctx.fillStyle = 'black';
        ctx.font = "10px Arial";
        ctx.fillText("latency: " + latencyMean + " ms", 900, 20);
        // ctx.fillText("server delta: " + serverDeltaMean + " ms", 900, 30);
        // ctx.fillText("time delta: " + timeDelta + " ms", 900, 40);

        let aimPos = utils.exports.drawAim(clientBattleTank.x, clientBattleTank.y, mouseX, mouseY, 4, 200);
        ctx.beginPath();
        ctx.arc(aimPos.x, aimPos.y, 6, 0, 2 * Math.PI);
        ctx.stroke();
      }
    }
  }, 1000 / 60);
</script>
